Offline Year 3 "Money" e-Assessment – Product Requirements Document
React Single-Page App with IndexedDB (Option 2)

EXECUTIVE SUMMARY
Build a single-page React web app that delivers a 21-question Year 3 money assessment offline. Pupils launch the quiz by double-clicking index.html on a shared network drive. All interactivity (drag-and-drop coins/notes, sorting, text entry, radio buttons) runs client-side. Each student's responses and score are persisted locally in IndexedDB and can be exported as a CSV for teachers. The whole bundle must work without internet, on Windows PCs, with concurrent classroom use.

GOALS & SUCCESS METRICS
- Seamless offline usage: ≥ 95% of pupils complete the quiz without teacher tech assistance
- Accurate result capture: 100% of completed attempts stored in IndexedDB and exportable
- Ease of deployment: Teacher copies/replaces a single dist/ folder; no installs
- Fast load: First screen ≤ 3s on a 2017-era Windows laptop
- Accessibility baseline: Colour contrast ≥ AA; keyboard usable; voice-over labels

BACKGROUND & CONTEXT
- Current worksheet is a Flash-era activity now replaced by interactive web app
- School network lacks a local web server; IT policy forbids installing software on student PCs
- Teachers need drag-and-drop visuals that mimic Australian coins/notes
- Automating marking will save > 30 min per class

STAKEHOLDERS
- Product Owner: Douglas Sutherland (Curriculum alignment & usability)
- Teacher Users: Year 3 educators (Assess learning evidence)
- Pupils: Year 3 students (Engage with interactive tasks)
- IT Support: School ICT officer (Deployment & permissions)

PERSONAS
1. Ms Smith – Year 3 teacher; moderate tech confidence. Needs one-click quiz & CSV marks
2. Lachlan – 8-year-old; uses mouse; limited attention span; needs clear UI cues

ASSUMPTIONS
- Classroom PCs run Edge ≥ 115 or Chrome ≥ 115
- Pupils log in under a generic classroom Windows account (shared browser profile)
- Network-share bandwidth is adequate
- Coin/note graphics are licensed or original artwork

SCOPE - IN-SCOPE
- 21 interactive questions (see question catalogue)
- Per-question correctness logic
- Automatic scoring & summary screen
- IndexedDB persistence; CSV export
- "Start New Student" reset flow

SCOPE - OUT-OF-SCOPE
- Server-side dashboards
- Multi-language UI
- Real-time data sync

FUNCTIONAL REQUIREMENTS
FR-1: App loads fully offline after initial open (Must)
FR-2: Exactly 21 questions in fixed order (Must)
FR-3: Drag-and-drop of coin/note images (Must)
FR-4: Validate each answer on "Submit" (Should)
FR-5: Save each answer & mark to IndexedDB in real-time (Must)
FR-6: Calculate total score on completion (Must)
FR-7: Export results as CSV (Must)
FR-8: "Start New Student" clears volatile state (Should)
FR-9: Fully keyboard accessible (Should)
FR-10: Operates correctly on multiple PCs concurrently (Must)

NON-FUNCTIONAL REQUIREMENTS
Performance: Initial load < 3s; bundle ≤ 4MB gzipped
Reliability: IndexedDB write errors raise user-visible alert; retry logic
Security: No remote network calls; strict CSP
Privacy: Only pseudonymous student IDs stored
Maintainability: TypeScript with ESLint, Prettier; 80% unit-test coverage
Portability: Runs in any modern Chromium browser on Windows

QUESTION CATALOGUE & INTERACTION PATTERNS
1. Drag coins to make 50¢ (Notebook 50¢) - Coin set, correct flag
3. Drag note to make $5 (Doll $5) - Note chosen
6. Sort five notes high → low (Order notes) - Final order array
7. True/False ($2.50 > $0.85) - Boolean
8. MCQ equivalent value (Piggy banks A/B/C) - Option
12. Text entry ($10 + 2×$2) - Text
21. Change calculation (Wrap change from $50) - Amount
Full 1-21 list maintained in design spec

TECH STACK & ARCHITECTURE
UI: React 18 + TypeScript (Functional components)
State: Zustand or Context API (Small footprint)
Drag & Drop: @dnd-kit/core (Accessible, touch-friendly)
Storage: IndexedDB via Dexie 4 (Typed schema)
Build: Vite (Fast dev & prod build)
Styling: Tailwind CSS (Utility classes)
Testing: Jest + RTL (Unit/integration)
CSV Export: file-saver + Blob (One-click download)

DATA MODEL
interface Attempt {
  uuid: string;
  studentId: string;
  answers: {
    qId: number;
    userInput: any;
    isCorrect: boolean;
  }[];
  score: number;
  startedAt: Date;
  completedAt: Date;
}

UX/UI GUIDELINES
- 1280×720 layout; large drag targets
- Progress pills 01-21 footer
- Keyboard fallback for drag-and-drop
- WCAG-AA colour contrast

ACCESSIBILITY
- Alt text: aria-label="50 cent coin" etc
- Keyboard: Focus rings; arrow & space keys
- Readability: Min 16px; optional Lexend font

SECURITY & PRIVACY
- CSP: default-src 'self'
- No external network calls
- IndexedDB is sandboxed per origin
- Exported CSV stored locally; treated as student work

PERFORMANCE TARGETS
- Initial load: ≤ 3s
- Drag latency: ≤ 16ms per frame
- IndexedDB write: ≤ 20ms

DEPLOYMENT FLOW
1. Dev: npm run build → dist/
2. Teacher copies dist to \\NetworkShare\MoneyQuiz\
3. Pupils double-click index.html
4. To update: overwrite folder

ANALYTICS & REPORTING
- Per-attempt CSV: studentId, timestamp, q1, …, q21, score
- Future: batch exporter

TESTING & QA
Unit: Components, utils
Integration: Drag-and-drop, IndexedDB, CSV
E2E: Cypress full run
Accessibility: axe-core + manual
UAT: Pilot two classes

TIMELINE (INDICATIVE)
Week 1: Finalise PRD & question assets
Week 2-3: Repo scaffold, base nav
Week 4-5: Q1-10 implementation
Week 6-7: Q11-21, summary, CSV
Week 8: Perf & a11y polish
Week 9: QA / bug-bash
Week 10: Classroom pilot
Week 11: Iterate, final build
Week 12: Production rollout

OPEN QUESTIONS
1. Final wording & art for Q10-21
2. Student ID input method
3. Bulk CSV merge tool required 